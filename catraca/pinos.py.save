#!/usr/bin/env python
# -*- coding: latin-1 -*-

import os
import yaml
from catraca.gpio import GpioBase

__author__ = "Erivando Sena"
__copyright__ = "Copyright 2015, Unilab"
__email__ = "erivandoramos@unilab.edu.br"
__status__ = "Prototype" # Prototype | Development | Production


PINOS_YML = os.path.join(os.path.dirname(os.path.abspath(__file__)),"pinos.yml")


class ManagerPinos(GpioBase):

    def __init__(self):
        super(ManagerPinos, self).__init__()
        self.carrega_yaml()

    def carrega_yaml(self):
        with open(PINOS_YML) as file_data:
            self.pins = yaml.safe_load(file_data)

    def pino_response(self, numero, config):
        output = {
            'numero': numero,
            'nome': config.get('nome', ''),
            'm
odo': config['modo'],
            'valor': self.gpio.input(numero)
        }
        resistor = config.get('resistor', None)
        if resistor:
            output['resistor'] = resistor
        inicial = config.get('inicial', None)
        if inicial:
            output['inicial'] = inicial
        evento = config.get('evento', None)
        if evento:
            output['evento'] = evento
        ressalto = config.get('ressalto', None)
        if ressalto:
            output['ressalto'] = ressalto
        return output

    def ler_todos(self):
        results = []
        for pino_numero, pino_config in self.pins.items():
            data = self.pino_response(pino_numero, pino_config)
            results.append(data)
        return results

    def ler_um(self, numero):
        pino_numero = int(numero)
        try:
            pino_config = self.pins[pino_numero]
            return self.pino_response(pino_numero, pino_config)
        except KeyError:
            return None

    def atualiza_valor(self, numero, valor):
        pino_numero = int(numero)
        try:
            self.pins[pino_numero]
            self.gpio.output(pino_numero, valor)
            return True
        except KeyError:
            return None
